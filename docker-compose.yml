version: '3.8'

services:
  # Banco de dados PostgreSQL com PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: eventos_postgres
    environment:
      POSTGRES_DB: eventos_db
      POSTGRES_USER: eventos_user
      POSTGRES_PASSWORD: eventos_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventos_user -d eventos_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: eventos_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Mensageria RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: eventos_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: eventos_user
      RABBITMQ_DEFAULT_PASS: eventos_password
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoramento Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: eventos_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - eventos_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Visualização Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: eventos_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana:/etc/grafana/provisioning
    networks:
      - eventos_network
    depends_on:
      - prometheus

  # Aplicação Go (quando estiver pronta)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: eventos_api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=eventos_db
      - DB_USER=eventos_user
      - DB_PASSWORD=eventos_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=eventos_user
      - RABBITMQ_PASSWORD=eventos_password
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eventos_network
    profiles:
      - app

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:

networks:
  eventos_network:
    driver: bridge
