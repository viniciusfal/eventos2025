# Multi-stage build para produção otimizada
FROM golang:1.21-alpine AS builder

# Instalar dependências de build
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    make \
    gcc \
    musl-dev

# Criar usuário não-root para build
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Definir diretório de trabalho
WORKDIR /build

# Copiar arquivos de dependências primeiro (melhor cache)
COPY go.mod go.sum ./

# Download das dependências com cache otimizado
RUN go mod download && go mod verify

# Copiar código fonte
COPY . .

# Otimizar build para produção
RUN CGO_ENABLED=0 \
    GOOS=linux \
    GOARCH=amd64 \
    go build \
    -a \
    -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -tags netgo,osusergo \
    -o main \
    ./cmd/api

# Verificar se o binário foi criado
RUN ls -la main && file main

# Stage final - Imagem mínima para produção
FROM scratch

# Copiar certificados SSL e timezone data
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copiar binário da aplicação
COPY --from=builder /build/main /app/main

# Copiar arquivos de configuração necessários
COPY --from=builder /build/configs /app/configs

# Definir usuário não-root
USER 1001:1001

# Definir variáveis de ambiente para produção
ENV GIN_MODE=release
ENV TZ=America/Sao_Paulo

# Expor porta
EXPOSE 8080

# Health check otimizado
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
    CMD ["/app/main", "--health-check"] || exit 1

# Comando de execução
ENTRYPOINT ["/app/main"]