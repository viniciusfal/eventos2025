#!/bin/bash

# Script de Deploy Automatizado para Produ√ß√£o
# Sistema de Check-in em Eventos
# Vers√£o: 1.0

set -euo pipefail

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
DOCKER_COMPOSE_FILE="docker-compose.production.yml"
ENV_FILE=".env.production"
BACKUP_DIR="/var/backups/eventos"
LOG_FILE="/var/log/eventos-deploy.log"

# Fun√ß√µes de log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" | tee -a "$LOG_FILE"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" | tee -a "$LOG_FILE"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}" | tee -a "$LOG_FILE"
}

# Verificar se est√° rodando como root ou com sudo
check_permissions() {
    if [[ $EUID -eq 0 ]]; then
        warn "Rodando como root. Considere usar um usu√°rio espec√≠fico para deploy."
    fi
}

# Verificar depend√™ncias
check_dependencies() {
    info "Verificando depend√™ncias..."
    
    command -v docker >/dev/null 2>&1 || error "Docker n√£o est√° instalado"
    command -v docker-compose >/dev/null 2>&1 || error "Docker Compose n√£o est√° instalado"
    command -v curl >/dev/null 2>&1 || error "curl n√£o est√° instalado"
    
    # Verificar se Docker est√° rodando
    if ! docker info >/dev/null 2>&1; then
        error "Docker n√£o est√° rodando"
    fi
    
    log "‚úÖ Todas as depend√™ncias verificadas"
}

# Verificar arquivo de ambiente
check_env_file() {
    info "Verificando arquivo de ambiente..."
    
    if [[ ! -f "$PROJECT_DIR/$ENV_FILE" ]]; then
        error "Arquivo $ENV_FILE n√£o encontrado. Crie o arquivo com as vari√°veis de produ√ß√£o."
    fi
    
    # Verificar vari√°veis obrigat√≥rias
    required_vars=(
        "DB_PASSWORD"
        "REDIS_PASSWORD"
        "RABBITMQ_PASSWORD"
        "JWT_SECRET"
        "GRAFANA_PASSWORD"
    )
    
    source "$PROJECT_DIR/$ENV_FILE"
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var:-}" ]]; then
            error "Vari√°vel $var n√£o est√° definida no arquivo $ENV_FILE"
        fi
    done
    
    log "‚úÖ Arquivo de ambiente verificado"
}

# Criar backup do banco de dados
create_backup() {
    info "Criando backup do banco de dados..."
    
    # Criar diret√≥rio de backup se n√£o existir
    mkdir -p "$BACKUP_DIR"
    
    # Nome do backup com timestamp
    BACKUP_FILE="$BACKUP_DIR/eventos_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    # Verificar se o container do PostgreSQL est√° rodando
    if docker ps | grep -q "eventos_postgres_prod"; then
        log "Fazendo backup do banco de dados..."
        
        docker exec eventos_postgres_prod pg_dump \
            -U "${DB_USER:-eventos_user}" \
            -d "${DB_NAME:-eventos_db}" \
            > "$BACKUP_FILE" || warn "Falha ao criar backup do banco"
        
        if [[ -f "$BACKUP_FILE" ]]; then
            log "‚úÖ Backup criado: $BACKUP_FILE"
        else
            warn "‚ö†Ô∏è  Backup n√£o foi criado"
        fi
    else
        warn "‚ö†Ô∏è  Container PostgreSQL n√£o est√° rodando, pulando backup"
    fi
}

# Fazer pull da imagem mais recente
pull_latest_image() {
    info "Fazendo pull da imagem mais recente..."
    
    IMAGE_NAME="ghcr.io/viniciusfal/eventos2025:latest"
    
    docker pull "$IMAGE_NAME" || error "Falha ao fazer pull da imagem $IMAGE_NAME"
    
    log "‚úÖ Imagem atualizada: $IMAGE_NAME"
}

# Deploy da aplica√ß√£o
deploy_application() {
    info "Iniciando deploy da aplica√ß√£o..."
    
    cd "$PROJECT_DIR"
    
    # Parar containers existentes
    log "Parando containers existentes..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" --env-file "$ENV_FILE" down || warn "Falha ao parar containers"
    
    # Remover containers √≥rf√£os
    docker container prune -f || warn "Falha ao remover containers √≥rf√£os"
    
    # Subir aplica√ß√£o
    log "Subindo aplica√ß√£o..."
    docker-compose -f "$DOCKER_COMPOSE_FILE" --env-file "$ENV_FILE" up -d || error "Falha ao subir aplica√ß√£o"
    
    log "‚úÖ Aplica√ß√£o deployada com sucesso"
}

# Verificar health da aplica√ß√£o
check_health() {
    info "Verificando sa√∫de da aplica√ß√£o..."
    
    local max_attempts=30
    local attempt=1
    local health_url="http://localhost:8080/health"
    
    while [[ $attempt -le $max_attempts ]]; do
        info "Tentativa $attempt/$max_attempts - Verificando health endpoint..."
        
        if curl -f -s "$health_url" >/dev/null 2>&1; then
            log "‚úÖ Aplica√ß√£o est√° saud√°vel!"
            return 0
        fi
        
        sleep 10
        ((attempt++))
    done
    
    error "‚ùå Aplica√ß√£o n√£o respondeu ao health check ap√≥s $max_attempts tentativas"
}

# Executar smoke tests
run_smoke_tests() {
    info "Executando smoke tests..."
    
    local base_url="http://localhost:8080"
    local endpoints=(
        "/health"
        "/ready"
        "/live"
        "/metrics"
        "/ping"
    )
    
    for endpoint in "${endpoints[@]}"; do
        info "Testando endpoint: $endpoint"
        
        if curl -f -s "$base_url$endpoint" >/dev/null 2>&1; then
            log "‚úÖ $endpoint - OK"
        else
            error "‚ùå $endpoint - FALHA"
        fi
    done
    
    log "‚úÖ Todos os smoke tests passaram"
}

# Limpeza de imagens antigas
cleanup_old_images() {
    info "Limpando imagens Docker antigas..."
    
    # Remover imagens n√£o utilizadas
    docker image prune -f || warn "Falha ao limpar imagens n√£o utilizadas"
    
    # Remover volumes √≥rf√£os
    docker volume prune -f || warn "Falha ao limpar volumes √≥rf√£os"
    
    log "‚úÖ Limpeza conclu√≠da"
}

# Mostrar status dos servi√ßos
show_status() {
    info "Status dos servi√ßos:"
    echo
    docker-compose -f "$PROJECT_DIR/$DOCKER_COMPOSE_FILE" --env-file "$PROJECT_DIR/$ENV_FILE" ps
    echo
    
    info "Logs recentes da aplica√ß√£o:"
    docker-compose -f "$PROJECT_DIR/$DOCKER_COMPOSE_FILE" --env-file "$PROJECT_DIR/$ENV_FILE" logs --tail=10 api
}

# Rollback em caso de falha
rollback() {
    error "Deploy falhou! Iniciando rollback..."
    
    # Parar containers atuais
    docker-compose -f "$PROJECT_DIR/$DOCKER_COMPOSE_FILE" --env-file "$PROJECT_DIR/$ENV_FILE" down || true
    
    # Aqui voc√™ pode implementar l√≥gica para voltar √† vers√£o anterior
    # Por exemplo, usar uma tag espec√≠fica da imagem ou restaurar backup
    
    error "Rollback necess√°rio. Verifique os logs e tente novamente."
}

# Fun√ß√£o principal
main() {
    log "üöÄ Iniciando deploy do Sistema de Check-in em Eventos"
    log "üìÖ Data: $(date)"
    log "üë§ Usu√°rio: $(whoami)"
    log "üìÇ Diret√≥rio: $PROJECT_DIR"
    
    # Trap para rollback em caso de erro
    trap rollback ERR
    
    check_permissions
    check_dependencies
    check_env_file
    create_backup
    pull_latest_image
    deploy_application
    check_health
    run_smoke_tests
    cleanup_old_images
    show_status
    
    log "üéâ Deploy conclu√≠do com sucesso!"
    log "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:8080"
    log "üìä Grafana dispon√≠vel em: http://localhost:3000"
    log "üìà Prometheus dispon√≠vel em: http://localhost:9090"
}

# Verificar argumentos
case "${1:-deploy}" in
    "deploy"|"")
        main
        ;;
    "rollback")
        rollback
        ;;
    "status")
        show_status
        ;;
    "backup")
        create_backup
        ;;
    "health")
        check_health
        ;;
    "cleanup")
        cleanup_old_images
        ;;
    *)
        echo "Uso: $0 [deploy|rollback|status|backup|health|cleanup]"
        echo
        echo "Comandos dispon√≠veis:"
        echo "  deploy   - Deploy completo da aplica√ß√£o (padr√£o)"
        echo "  rollback - Rollback da aplica√ß√£o"
        echo "  status   - Mostrar status dos servi√ßos"
        echo "  backup   - Criar backup do banco de dados"
        echo "  health   - Verificar sa√∫de da aplica√ß√£o"
        echo "  cleanup  - Limpar imagens e volumes n√£o utilizados"
        exit 1
        ;;
esac