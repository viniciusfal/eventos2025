version: '3.8'

services:
  # Aplicação principal
  api:
    image: ghcr.io/viniciusfal/eventos2025:latest
    container_name: eventos_api_prod
    restart: unless-stopped
    environment:
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-eventos_db}
      - DB_USER=${DB_USER:-eventos_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-25}
      - DB_MAX_IDLE_CONNECTIONS=${DB_MAX_IDLE_CONNECTIONS:-5}
      
      # Cache
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB:-0}
      
      # Messaging
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-eventos_user}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-24h}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION:-168h}
      
      # Application
      - GIN_MODE=release
      - PORT=8080
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - ENVIRONMENT=production
      
      # Monitoring
      - ENABLE_METRICS=true
      - ENABLE_TRACING=true
      - PROMETHEUS_PORT=9090
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD", "/app/main", "--health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Banco de dados PostgreSQL com PostGIS
  postgres:
    image: postgis/postgis:15-3.3
    container_name: eventos_postgres_prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-eventos_db}
      - POSTGRES_USER=${DB_USER:-eventos_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
      - ./configs/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-eventos_user} -d ${DB_NAME:-eventos_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: eventos_redis_prod
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --rdbcompression yes
      --rdbchecksum yes
    volumes:
      - redis_data_prod:/data
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Mensageria RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: eventos_rabbitmq_prod
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-eventos_user}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.7
    volumes:
      - rabbitmq_data_prod:/var/lib/rabbitmq
      - ./configs/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - eventos_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    ports:
      - "127.0.0.1:15672:15672" # Management UI apenas localhost

  # Monitoramento Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: eventos_prometheus_prod
    restart: unless-stopped
    volumes:
      - ./configs/prometheus.production.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_prod:/prometheus
    networks:
      - eventos_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090" # Prometheus apenas localhost
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Visualização Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: eventos_grafana_prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./configs/grafana/production:/etc/grafana/provisioning:ro
    networks:
      - eventos_network
    depends_on:
      - prometheus
    ports:
      - "127.0.0.1:3000:3000" # Grafana apenas localhost
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: eventos_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./configs/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    depends_on:
      - api
    networks:
      - eventos_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local
  rabbitmq_data_prod:
    driver: local
  prometheus_data_prod:
    driver: local
  grafana_data_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  eventos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16